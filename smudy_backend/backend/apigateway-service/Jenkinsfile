def gatewayimage

pipeline {
    agent any

    environment {
        // 도커 이미지 태그를 설정합니다. Git 커밋 ID를 사용할 수 있습니다.
        DOCKER_IMAGE = 'API_GATEWAY:$GIT_COMMIT'
        // 도커 레지스트리 주소 설정
        DOCKER_REGISTRY = 'https://registry.hub.docker.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Test') {
            steps {
                sh './gradlew test'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Docker 이미지를 빌드합니다.
                    docker.build(env.DOCKER_IMAGE)
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Docker 레지스트리에 로그인
                    withDockerRegistry(credentialsId: 'docker', url: 'https://registry.hub.docker.com') {
                                gatewayImage = docker.build(env.DOCKER_IMAGE)

                                    // Docker 빌드 결과 출력
                                    if (gatewayImage != 0) {
                                        docker.withRegistry('https://registry.hub.docker.com', 'docker') {
                                            backendImage.push()
                                        }
                                    } else {
                                        error "Docker build failed"
                                    }
                                }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker rmi $DOCKER_IMAGE'
            }
        }
    }

    post {
        always {
            // 항상 실행: 테스트 결과를 수집
            junit '**/build/test-results/test/*.xml'
            // 빌드 과정에서 생성된 아티팩트 정리
            cleanWs()
        }
    }
}
